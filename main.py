import os
import random
import uuid

from aiogram import executor
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery, InputFile
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import markdown

from json_dict import JsonDict
from settings import dp, session, Base, engine, bot
from models.User import User
from models.Event import Event

Base.metadata.create_all(engine)

editing_groups = {}


class Form(StatesGroup):
    firstname = State()
    lastname = State()
    phone = State()
    comps = State()
    dob = State()
    group = State()


class EventState(StatesGroup):
    add = State()


class Lesson(StatesGroup):
    lesson = State()


class Find(StatesGroup):
    start = State()
    run = State()


def get_user(chat_id):
    return session.query(User).filter_by(chat_id=chat_id).first()


class LevelFilter(BoundFilter):
    key = "level"

    def __init__(self, level=0):
        self.level = level

    async def check(self, message: Message | CallbackQuery) -> bool:
        if isinstance(message, Message):
            user = get_user(message.chat.id)
        elif isinstance(message, CallbackQuery):
            user = get_user(message.message.chat.id)
        if user.level < self.level:
            await message.answer("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return False
        return True


class IsDay(BoundFilter):
    key = "day"
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]

    async def check(self, message: Message | CallbackQuery) -> bool:
        if (message.text.lower() in self.days) and message.chat.id in list(editing_groups):
            return True
        return False


def add_buttons(keyboard: ReplyKeyboardMarkup | InlineKeyboardMarkup,
                buttons: list[KeyboardButton] | list[InlineKeyboardButton]):
    for i in buttons:
        if isinstance(i, list):
            keyboard.row(*i)
        else:
            keyboard.add(i)


default_markup = ReplyKeyboardMarkup(resize_keyboard=True)
buttons = [KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"),
           [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏")],
           KeyboardButton("–ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É")]
add_buttons(default_markup, buttons)
comps = ["–î–∏–∑–∞–π–Ω–µ—Ä",
         "–ê–Ω–∞–ª–∏—Ç–∏–∫",
         "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
         "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
         "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
         "Java —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
         "C/C++ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
         "Go —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
         "–ò–Ω–∂–µ–Ω–µ—Ä",
         "3D modeller",
         "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ",
         "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"]


@dp.message_handler(lambda x: x.text.lower() == "–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É")
async def find_team(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [KeyboardButton(text) for text in comps] + [KeyboardButton("–ù–∞–∑–∞–¥")]
    add_buttons(markup, buttons)
    await Find.start.set()
    return await message.answer("–ö–æ–≥–æ –∏—â–µ–º?", reply_markup=markup)


@dp.message_handler(state=Find.run)
async def run_leobot(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if message.text.lower() == "—Å—Ç–æ–ø":
        user.viewed_index = 0
        user.is_finding = ""
        session.commit()
        await state.finish()
        return await message.answer("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=default_markup)
    users = session.query(User).all()
    curr_user = users[user.viewed_index]
    if message.text == "üëç":
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º", url=curr_user.link))
        return await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {curr_user.phone}", reply_markup=markup)
    else:
        for i in range(user.viewed_index + 1, len(users)):
            curr_user = users[i]
            if user.id == curr_user.id:
                continue
            if user.is_finding in curr_user.comp.split(", ") and curr_user.want_find == 1:
                markup = ReplyKeyboardMarkup(resize_keyboard=True)
                buttons = [[KeyboardButton("üëç"), KeyboardButton("üëé")], KeyboardButton("–°—Ç–æ–ø")]
                add_buttons(markup, buttons)
                user.viewed_index = i
                session.commit()
                return await message.answer(f"__* –ò–º—è*__: {markdown.escape_md(curr_user.firstname)}\n"
                                            f"__*–§–∞–º–∏–ª–∏—è*__: {markdown.escape_md(curr_user.lastname)}\n"
                                            f"__*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*__: {markdown.escape_md(curr_user.dob)}\n"
                                            f"__*–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏*__: {markdown.escape_md(curr_user.comp)}",
                                            reply_markup=markup,
                                            parse_mode="MarkdownV2")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(")


@dp.message_handler(state=Find.start)
async def find(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        user.is_finding = ""
        session.commit()
        await state.finish()
        return await message.answer("–≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=default_markup)
    users = session.query(User).all()
    if message.text in comps:
        user.is_finding = message.text
        session.commit()
        for i in range(user.viewed_index, len(users)):
            curr_user = users[i]
            if user.id == curr_user.id:
                continue
            if user.is_finding in curr_user.comp.split(", ") and curr_user.want_find == 1:
                markup = ReplyKeyboardMarkup(resize_keyboard=True)
                buttons = [[KeyboardButton("üëç"), KeyboardButton("üëé")], KeyboardButton("–°—Ç–æ–ø")]
                add_buttons(markup, buttons)
                await message.answer(f"__* –ò–º—è*__: {markdown.escape_md(curr_user.firstname)}\n"
                                     f"__*–§–∞–º–∏–ª–∏—è*__: {markdown.escape_md(curr_user.lastname)}\n"
                                     f"__*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*__: {markdown.escape_md(curr_user.dob)}\n"
                                     f"__*–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏*__: {markdown.escape_md(curr_user.comp)}", reply_markup=markup,
                                     parse_mode="MarkdownV2")
                user.viewed_index = i
                session.commit()
                return await Find.next()
        return await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞–∫–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é.")
    else:
        await message.answer("–¢–∞–∫–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–µ—Ç(\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–Ω–∏–∑—É.")


def get_new_by_tags(tags, user):
    events = session.query(Event).all()
    tags = [i.strip() for i in tags]

    for event in events:
        event_tags = [i.lower() for i in event.tags.split(",")]
        for tag in tags:
            if tag.lower() in event_tags and event.id not in user.read_news:
                user.read_news += event.id + ", "
                session.commit()
                return event
    for event in events:
        if event.id not in user.read_news:
            user.read_news += event.id + ", "
            session.commit()
            return event

    return "–ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å("


@dp.message_handler(lambda x: x.text.lower() == "–Ω–∞–∑–∞–¥")
async def back(message: Message):
    return await message.answer("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é", reply_markup=default_markup)


@dp.message_handler(lambda x: x.text.lower() == "–Ω–æ–≤–æ—Å—Ç–∏" or x.text.lower() == "–ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë")
async def show_new(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"), KeyboardButton("–ù–∞–∑–∞–¥")]
    add_buttons(markup, buttons)
    user = get_user(message.chat.id)
    if user.comp is not None:
        event = get_new_by_tags(user.comp.split(","), user)
    else:
        event = get_new_by_tags([], user)
    photos = os.listdir("imgs")
    photos = [i.split(".")[0] for i in photos]
    if isinstance(event, str):
        return await message.answer(event)
    if event.id in photos:
        return await bot.send_photo(message.chat.id, InputFile(f"imgs/{event.id}.jpg"), caption=event.text,
                                    reply_markup=markup)
    else:
        return await message.answer(event.text, reply_markup=markup)


@dp.message_handler(commands=["id"])
async def get_id(message: Message):
    await message.answer(f"–í–∞—à id: ```{str(message.chat.id)}```", parse_mode="Markdown")


@dp.message_handler(LevelFilter(5), commands=["set"])
async def set_level(message: Message):
    args = message.text.split(",")
    args[0] = args[0].split()[1]
    args = [i.strip() for i in args]
    print(args)
    if len(args) < 3:
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.")
    user = get_user(args[0])
    if hasattr(user, args[1]):
        setattr(user, args[1], args[2])
        session.commit()
        return await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


@dp.message_handler(state=Lesson.lesson)
async def add_lesson(message: Message, state: FSMContext):
    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        del editing_groups[message.chat.id]
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=default_markup)
        return await state.finish()
    schedule = JsonDict("schedule.json")
    group = editing_groups[message.chat.id][0].strip()
    day = editing_groups[message.chat.id][1]
    data = message.text.split(",")
    if len(data) == 3:
        schedule[group][day].append(data)
        schedule.push(schedule.dictionary)
        return await message.answer("–ü–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    return await message.answer("–í—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


@dp.message_handler(IsDay())
async def edit_day(message: Message):
    day = IsDay.days.index(message.text.lower())
    editing_groups[message.chat.id].append(day)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ì–æ—Ç–æ–≤–æ"))
    schedule = JsonDict("schedule.json")
    sdict = schedule.dictionary
    group = editing_groups[message.chat.id][0].strip()
    try:
        sdict[group][day] = []
        schedule.push(schedule.dictionary)
    except:
        for i in range(6 - len(sdict[group])):
            sdict[group].append([])
        schedule.push(schedule.dictionary)

    await Lesson.lesson.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n"
                         "–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–∞–±–∏–Ω–µ—Ç, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ - –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞")
    await message.answer("–ü—Ä–∏–º–µ—Ä: –†—É—Å—Å–∫–∏–π —è–∑—ã–∫, 0305, 9:00 - 10:30", reply_markup=markup)


@dp.message_handler(LevelFilter(3), commands=["edit_schedule"])
async def edit_schedule(message: Message):
    schedule = JsonDict("schedule.json")
    groups = schedule.keys()
    markup = InlineKeyboardMarkup()
    buttons = []
    print(groups)
    for i in range(0, len(groups) // 3, 3):
        buttons.append([
            InlineKeyboardButton(groups[i], callback_data=f"edit: {groups[i]}"),
            InlineKeyboardButton(groups[i + 1], callback_data=f"edit: {groups[i + 1]}"),
            InlineKeyboardButton(groups[i + 2], callback_data=f"edit: {groups[i + 2]}")
        ])
    buttons.append([])
    for i in range(len(groups) % 3):
        buttons[-1].append(InlineKeyboardButton(groups[-1 - i], callback_data=f"edit: {groups[-1 - i]}"))
    buttons.append(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add"))

    add_buttons(markup, buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=markup)


@dp.message_handler(commands=["start"])
async def start(message: Message):
    user = get_user(message.chat.id)
    if not user:
        user = User(firstname=message.from_user.first_name,
                    lastname=message.from_user.last_name,
                    chat_id=message.chat.id,
                    link=message.from_user.url,
                    comp="")
        session.add(user)
        session.commit()
    else:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç –µ—â—ë —Ä–∞–∑)", reply_markup=default_markup)

    return await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user.firstname}, —è —Ç–≤–æ–π HelpBot!‚≠êÔ∏è\n–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, "
        "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ—Ç —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∫–ª—É–±–æ–≤, –ø–æ–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º. "
        "\n–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ! üòä",
        reply_markup=default_markup)


@dp.message_handler(lambda x: x.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_func(message: Message):
    user = get_user(message.chat.id)
    if user and user.group:
        shedule = JsonDict("schedule.json")
        if user.group in shedule.keys():
            answ = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
            for i, day in enumerate(days):
                if i >= len(shedule[user.group]):
                    break
                answ += f"* {day}*" + ": \n"
                for n, v in enumerate(shedule[user.group][i]):
                    try:
                        answ += f"{n + 1}\. {v[0] if v[0] != '-' else '–û–∫–Ω–æ'}, –∫–∞–±: __ {v[1]}__\n``` {v[2] if v[2] != '-' else ''}```\n".replace(
                            "-", "\-")
                    except:
                        continue

                await message.answer(answ, parse_mode="MarkdownV2")
                answ = ""
        else:
            return await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ(\n"
                                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
    else:
        return await message.answer("–ü–æ–ª–µ '–≥—Ä—É–ø–ø–∞' –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ü—Ä–æ—Ñ–∏–ª—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")


class Tag(StatesGroup):
    set = State()


@dp.message_handler(LevelFilter(2), state=Tag.set)
async def set_tags(message: Message, state: FSMContext):
    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        await state.finish()
        return await message.answer("–¢—ç–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=default_markup)
    if message.text in comps:
        user = get_user(message.chat.id)
        event = session.query(Event).filter_by(id=user.last_published).first()
        if not message.text in event.tags:
            event.tags += message.text + ", "
            session.commit()
            return await message.answer("–¢—ç–≥ –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            return await message.answer("–¢—ç–≥ —É–∂–µ –±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω.")
    return await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏(\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ")


@dp.message_handler(LevelFilter(2), commands=["tags"])
async def add_tags(message: Message):
    user = get_user(message.chat.id)
    event = session.query(Event).filter_by(id=user.last_published).first()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [KeyboardButton(i) for i in comps] + [KeyboardButton("–ì–æ—Ç–æ–≤–æ")]
    add_buttons(markup, buttons)
    if event is not None:
        await Tag.set.set()
        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–æ–π–¥—ë—Ç —ç—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å:", reply_markup=markup)


@dp.message_handler(LevelFilter(2), commands=["add_event"])
async def add_events(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [KeyboardButton("–æ—Ç–º–µ–Ω–∞")]
    add_buttons(markup, buttons)
    await EventState.add.set()
    await message.answer("–ü—Ä–æ–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å.", reply_markup=markup)


@dp.message_handler(content_types=["photo"], state=EventState.add)
async def add_new(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    uid = uuid.uuid4().hex
    try:
        event = Event(id=uid, text=message.caption, tags="")
        session.add(event)
        session.commit()
        await message.photo[-1].download(destination_file=f"imgs/{uid}.jpg")
        await state.finish()
        user.last_published = uid
        session.commit()
        return await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—ç–≥–∏(–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏) –∫ –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /tags.",
                                    reply_markup=default_markup)
    except:
        return await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å.")


@dp.message_handler(state=EventState.add)
async def add_text_new(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        return await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=default_markup)
    try:
        uid = uuid.uuid4().hex
        event = Event(id=uid, text=message.text, tags="")
        session.add(event)
        session.commit()
        await state.finish()
        user.last_published = uid
        session.commit()
        return await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—ç–≥–∏(–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏) –∫ –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /tags.",
                                    reply_markup=default_markup)
    except:
        await state.finish()
        return await message.answer("–ù–æ–≤–æ—Å—Ç—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


@dp.message_handler(lambda x: x.text.lower() == "–Ω–æ–≤–æ—Å—Ç–∏")
async def events(message: Message):
    pass


@dp.message_handler(lambda x: x.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    user = get_user(message.chat.id)
    markup = InlineKeyboardMarkup()
    buttons = [InlineKeyboardButton("–ò–º—è", callback_data="firstname"),
               InlineKeyboardButton("–§–∞–º–∏–ª–∏—è", callback_data="lastname"),
               InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="phone"),
               InlineKeyboardButton("–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", callback_data="comps"),
               InlineKeyboardButton("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="dob"),
               InlineKeyboardButton("–ì—Ä—É–ø–ø–∞", callback_data="group")
               ]
    add_buttons(markup, buttons)
    if user:
        text = f"__* –ò–º—è*__: {markdown.escape_md(user.firstname if user.firstname else '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n" \
               f"__*–§–∞–º–∏–ª–∏—è*__: {markdown.escape_md(user.lastname if user.lastname else '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n" \
               f"__*–¢–µ–ª–µ—Ñ–æ–Ω*__: {markdown.escape_md(user.phone if user.phone else '–ù–µ —É–∫–∞–∑–∞–Ω')}\n" \
               f"__*–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏*__: {markdown.escape_md(user.comp if user.comp else '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n" \
               f"__*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*__: {markdown.escape_md(user.dob if user.dob else '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n" \
               f"__*–ì—Ä—É–ø–ø–∞*__: {markdown.escape_md(user.group if user.group else '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        return await message.answer(text, reply_markup=markup,
                                    parse_mode="MarkdownV2")


@dp.message_handler(state=Form.firstname)
async def set_firstname(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        user.firstname = message.text
        session.commit()
        await message.answer(f"–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}")
    await state.finish()


@dp.message_handler(state=Form.group)
async def set_group(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        user.group = message.text
        session.commit()
        await message.answer(f"–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {message.text}")
    await state.finish()


@dp.message_handler(state=Form.dob)
async def set_dob(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        dob = message.text.split(".")
        if len(dob) == 3 and int(dob[0]) <= 31 and len(dob[0]) == 2 and int(dob[1]) <= 12 and len(dob[1]) == 2 \
                and len(dob[2]) <= 5:
            user.dob = message.text
            session.commit()
        else:
            return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY")
        await message.answer(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {message.text}")
    await state.finish()


@dp.message_handler(state=Form.phone)
async def set_phone(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        text = message.text.replace("-", "").replace("(", "").replace(")", "").replace("+", "").replace(" ", "")
        user.phone = text
        session.commit()
        await message.answer(f"—Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {text}")
    return await state.finish()


@dp.message_handler(state=Form.comps)
async def set_comps(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        comp = user.comp.split(", ") if user.comp else []
        text = message.text
        if text in comps and not (text in comp):
            comp.append(text)
            user.comp = ", ".join(comp)
            session.commit()
            return await message.answer(f"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")

        elif message.text == "–ì–æ—Ç–æ–≤–æ":
            await state.finish()
            return await message.answer(f"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω—ã", reply_markup=default_markup)
        elif not text in comps:
            return await message.answer(f"–¢–∞–∫–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")


@dp.message_handler(state=Form.lastname)
async def set_lastname(message: Message, state: FSMContext):
    user = get_user(message.chat.id)
    if user:
        user.lastname = message.text
        session.commit()
        await message.answer(f"–§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {message.text}")
    await state.finish()


@dp.callback_query_handler()
async def callback_handler(call: CallbackQuery):
    user = get_user(call.message.chat.id)
    if "edit:" in call.data and user.level > 5:
        editing_groups[call.message.chat.id] = [call.data.split(":")[1]]
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
            KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫"),
            KeyboardButton("–°—Ä–µ–¥–∞"),
            KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥"),
            KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞"),
            KeyboardButton("–°—É–±–±–æ—Ç–∞")
        ]
        add_buttons(markup, buttons)
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)
        await call.answer(call.data.split(":")[1])
    elif call.data.lower() == "firstname":
        await Form.firstname.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    elif call.data.lower() == "lastname":
        await Form.lastname.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é")
    elif call.data.lower() == "phone":
        await Form.phone.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    elif call.data.lower() == "dob":
        await Form.dob.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY")
    elif call.data.lower() == "group":
        await Form.group.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É")
    elif call.data.lower() == "comps":
        buttons = [KeyboardButton(i) for i in comps] + [KeyboardButton("–ì–æ—Ç–æ–≤–æ")]
        markup = ReplyKeyboardMarkup()
        add_buttons(markup, buttons)
        user.comp = ""
        await Form.comps.set()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–æ–Ω–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö)",
                                  reply_markup=markup)

    await call.answer()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
